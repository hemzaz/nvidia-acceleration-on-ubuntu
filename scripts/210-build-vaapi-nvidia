#!/usr/bin/env bash

# Exit if nvidia-settings is not installed.
if [[ ! -f /usr/bin/nvidia-settings ]]; then
    echo "$0: package nvidia-settings is not installed, skipping..."
    exit 0
fi

# Exit if the the graphics driver does not meet requirement.
version=$(/usr/bin/nvidia-settings --version | grep version)
version=${version##* } # extract the version string from the line
version=${version%%.*} # extract major, not minor and revision

# Ensure bc is available
if ! command -v bc &> /dev/null; then
    echo "bc command not found, installing..."
    if ! apt update -y && apt install -y bc; then
        echo "Failed to install bc"
        exit 1
    fi
fi

if [[ $(bc -l <<< "${version} < 470") -eq 1 ]]; then
    echo "$0: NVIDIA graphics driver is older than 470, skipping..."
    exit 0
fi

# Log NVIDIA driver version for debugging
echo "$0: Detected NVIDIA driver version: ${version}"

name=nvidia-vaapi-driver
echo "building ${name}"

mkdir -p builddir || { echo "Failed to create builddir"; exit 1; }
cd builddir || { echo "Failed to change to builddir"; exit 1; }
rm -fr ${name}

if [[ ! -f ${name}.tar.gz ]]; then
    url="https://github.com/elFarto/nvidia-vaapi-driver"
    echo "git clone --depth 1 ${url}"
    git clone --depth 1 ${url}

    # Check for CUDA support
    if grep -q "cuda" ${name}/src/*.c 2>/dev/null; then
        echo "$0: CUDA support detected in the driver"
    else
        echo "$0: CUDA support not detected in the driver"
    fi

    # To allow building on Ubuntu using older meson 0.53.2 binary,
    # remove meson_version and meson.add_devenv block from meson.build.
    cd ${name}
    mv meson.build meson.build.orig
    awk '
        BEGIN { skip_rest = 0 }
        /meson_version/ { next }
        /meson.add_devenv/ { skip_rest = 1 }
        {
            if (skip_rest == 1) next
            print
        }
    ' meson.build.orig >meson.build
    cd ..

    tar czf ${name}.tar.gz ${name}
else
    tar xzf ${name}.tar.gz
fi

# The "libgstreamer-plugins-bad1.0-dev" package has opencv and sub-
# dependencies (i.e. 182 additional packages, >500MB) which are not
# required to build the NVIDIA NVDEC-enabled VA-API driver.
#
# Instead, update the dependencies list inside the package. Leave the
# modified package inside the build directory, but do not install it.
# This build script will install/uninstall the package automatically.
#
# Skip modification steps if the package is already installed.

pkgname=libgstreamer-plugins-bad1.0-dev
dpkg --list | grep -q $pkgname

if [[ $? -eq 0 ]]; then
    echo "using installed $pkgname"
    use_installed_pkg=1
else
    pkgarch=$(dpkg --print-architecture)
    pkgversion=$(dpkg-query -f '${Version}' -W libgstreamer-plugins-bad1.0-0)
    pkgfile="modpkg/${pkgname}_${pkgversion}_${pkgarch}.deb"

    if [[ ! -f $pkgfile ]]; then
        mkdir -p modpkg

        # Remove outdated package from the build folder.
        rm -f modpkg/${pkgname}_*.deb

        # Download package and move it to the build folder.
        echo "apt download $pkgname"
        if ! apt download $pkgname; then
            echo "Failed to download package $pkgname"
            exit 1
        fi
        mv -f ${pkgname}_*.deb modpkg/.

        # Extract content, modify dependency list, and re-bundle package.
        pushd modpkg >/dev/null
        pkgfile=$(ls -1 ${pkgname}_*.deb | tail -1)
        pkgdir=${pkgname}_dir

        echo "dpkg-deb -x $pkgfile $pkgdir"
        dpkg-deb -x $pkgfile $pkgdir

        echo "pkg-deb --control $pkgfile $pkgdir/DEBIAN"
        dpkg-deb --control $pkgfile $pkgdir/DEBIAN

        echo "Updating dependency list"
        awk '
            /^Depends:/ { sub(/,.*/, ""); print; next }
            { print }
        ' $pkgdir/DEBIAN/control >control.$$ && \
        mv -f control.$$ $pkgdir/DEBIAN/control

        echo "dpkg -b $pkgdir $pkgfile"
        dpkg -b $pkgdir $pkgfile
        rm -fr $pkgdir

        popd >/dev/null
    fi

    pkgdeb=$(ls -1 modpkg/${pkgname}_*.deb | tail -1)
    echo "using $pkgdeb"
    if ! dpkg -i "$pkgdeb"; then
        echo "Failed to install package $pkgdeb"
        exit 1
    fi
    use_installed_pkg=0
fi

if [[ -d ${name} ]]; then
    mkdir -p ${name}/build && cd ${name}/build
    mkdir -p /usr/local/lib/dri
    install_dest=/usr/local/lib/dri/nvdec_drv_video.so

    # prefer pkgconfig, include, and lib from /usr/local
    export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
    export C_INCLUDE_PATH=/usr/local/include
    export LIBRARY_PATH=/usr/local/lib
    export CFLAGS="-O2 -march=native -pthread"

    if ! meson setup .. --prefix=/usr/local --libdir=lib; then
        echo "Failed to configure build with meson"
        exit 1
    fi
    
    if ! ninja; then
        echo "Failed to build with ninja"
        exit 1
    fi
    
    /usr/bin/printf "Installing nvidia_drv_video.so to %s\n" "$install_dest"
    
    if ! cp -p nvidia_drv_video.so "$install_dest"; then
        echo "Failed to install driver to $install_dest"
        exit 1
    fi

    if [[ -f /usr/local/lib/dri/nvdec_drv_video.so ]]; then
        set -x
        pushd /usr/local/lib/dri >/dev/null
        ln -sf nvdec_drv_video.so nvidia_drv_video.so
        popd >/dev/null
    fi

    if [[ $use_installed_pkg -eq 0 ]]; then
        echo "Removing temporary package $pkgname"
        if ! apt remove -y $pkgname; then
            echo "Warning: Failed to remove package $pkgname"
            # Continue anyway since the build was successful
        fi
    fi
fi

