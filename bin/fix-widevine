#!/usr/bin/env bash

# Fix DRM Widevine for Chromium and Opera on Ubuntu Linux.
# This requires Chromium/Opera and Google-Chrome (i.e. WidevineCdm).
# Based on https://github.com/Ld-Hagen/fix-opera-linux-ffmpeg-widevine

if [[ "$USER" != "root" ]]; then
    echo "Please run the script as super user"
    exit 1
elif [[ $(uname -m) != "x86_64" ]]; then
    echo "This script is intended for x86_64 machines"
    exit 1
fi

GOOGLE_DIR="/opt/google/chrome"
OPERA_DIR="/usr/lib/x86_64-linux-gnu/opera"
OPERA_LIB_EXTRA="$OPERA_DIR/lib_extra"

if [[ ! -f "$GOOGLE_DIR/WidevineCdm/manifest.json" ]]; then
    echo "Cannot open '$GOOGLE_DIR/WidevineCdm/manifest.json' (No such file)"
    exit 1
fi

if [[ -e /usr/lib/chromium/chrome ]]; then
    CHROMIUM_DIR="/usr/lib/chromium"
else
    CHROMIUM_DIR="/usr/lib/chromium-browser"
fi

[[ -d "$CHROMIUM_DIR" && -e "$CHROMIUM_DIR/chrome" ]] || \
    CHROMIUM_DIR=""

if [[ -d "$OPERA_DIR" && -e "$OPERA_DIR/opera" ]]; then
    [[ ! -d "$OPERA_LIB_EXTRA" ]] && mkdir -p "$OPERA_LIB_EXTRA"
else
    OPERA_DIR=""
fi

# Nothing to do.
if [[ -z "$CHROMIUM_DIR" && -z "$OPERA_DIR" ]]; then
    echo "Neither Chromium or Opera is installed, exiting..."
    exit 1
fi

# Check WidevineCdm.
if [[ -n "$CHROMIUM_DIR" && ! -L "$CHROMIUM_DIR/WidevineCdm" ]]; then
    echo "# making WidevineCdm link for Chromium"
    rm -fr "$CHROMIUM_DIR/WidevineCdm"
    ln -sfv "$GOOGLE_DIR/WidevineCdm" "$CHROMIUM_DIR/WidevineCdm"
fi

if [[ -n "$OPERA_DIR" && ! -L "$OPERA_LIB_EXTRA/WidevineCdm" ]]; then
    echo "# making WidevineCdm link for Opera"
    rm -fr "$OPERA_LIB_EXTRA/WidevineCdm"
    ln -sfv "$GOOGLE_DIR/WidevineCdm" "$OPERA_LIB_EXTRA/WidevineCdm"
fi

# Check Widevine_config.json.
OPERA_WIDEVINE_CFG="$OPERA_DIR/resources/widevine_config.json"

if [[ -n "$OPERA_DIR" && ! -f "$OPERA_WIDEVINE_CFG" ]]; then
    echo "# making config $OPERA_WIDEVINE_CFG"
    printf "[\n  {\n    \"preload\": \"$OPERA_LIB_EXTRA/WidevineCdm\"\n  }\n]\n" \
        > "$OPERA_WIDEVINE_CFG"
fi

# Check libffmpeg.so.
FFMPEG_SRC_REL="https://github.com/iteufel/nwjs-ffmpeg-prebuilt/releases/"
FFMPEG_ALT_REL="https://github.com/Ld-Hagen/fix-opera-linux-ffmpeg-widevine/releases/"

if [[ -n "$OPERA_DIR" ]]; then
    echo "# checking requirements"
    count=$(dpkg-query -f '${binary:Package}\n' -W | egrep -c '^(wget|unzip)$')
    if [[ $count -ne 2 ]]; then
        apt update -y
        apt install -y wget unzip
    fi

    echo "# retrieving version info"
    FFMPEG_SRC_URL=$(
        wget --https-only --secure-protocol=TLSv1_2 -qO- "$FFMPEG_SRC_REL" | awk -F\" '/-linux-x64.zip/ { print $2; exit }'
    )
    FFMPEG_ALT_URL=$(
        wget --https-only --secure-protocol=TLSv1_2 -qO- "$FFMPEG_ALT_REL" | awk -F\" '/-linux-x64.zip/ { print $2; exit }'
    )

    echo "# comparing versions"
    # First check if we could get any URLs
    if [[ -z "$FFMPEG_SRC_URL" ]]; then
        if [[ -z "$FFMPEG_ALT_URL" ]]; then
            echo "Cannot obtain version info from either source"
            echo "Please check your internet connection and try again"
            exit 1
        fi
        echo "Using alternate URL source (primary source unavailable)"
        FFMPEG_URL="https://github.com$FFMPEG_ALT_URL"
    else
        # If we have both URLs, compare versions to pick the newest
        if [[ -n "$FFMPEG_ALT_URL" ]]; then
            # Safe version comparison using sort -V
            SRC_VERSION="$(basename "$FFMPEG_SRC_URL")"
            ALT_VERSION="$(basename "$FFMPEG_ALT_URL")"
            
            # Use sort -V to compare versions, and take the newest one
            NEWEST_VERSION=$(printf "%s\n%s\n" "$SRC_VERSION" "$ALT_VERSION" | sort -V | tail -n1)
            
            if [[ "$NEWEST_VERSION" == "$SRC_VERSION" ]]; then
                echo "Using primary source (newer version: $SRC_VERSION)"
                FFMPEG_URL="https://github.com$FFMPEG_SRC_URL"
            else
                echo "Using alternate source (newer version: $ALT_VERSION)"
                FFMPEG_URL="https://github.com$FFMPEG_ALT_URL"
            fi
        else
            # Only have the source URL
            echo "Using primary source only"
            FFMPEG_URL="https://github.com$FFMPEG_SRC_URL"
        fi
    fi

    VERSION_URL=$(basename $FFMPEG_URL | sed -e 's/-linux-x64\.zip$//')
    VERSION_LOC=$(head -1 "$OPERA_LIB_EXTRA/libffmpeg.ver" 2>/dev/null)

    if [[ "$VERSION_URL" == "$VERSION_LOC" ]]; then
        echo "# libffmpeg-$VERSION_URL current"
    else
        echo "# downloading libffmpeg-$(basename "$FFMPEG_URL")"
        TEMP_DIR="/tmp/fix-ffmpeg-$$"
        mkdir -p "$TEMP_DIR" || { echo "Failed to create temporary directory"; exit 1; }
        
        # Download with added security and verification
        echo "Downloading from $FFMPEG_URL"
        if ! wget --https-only --secure-protocol=TLSv1_2 -q --show-progress "$FFMPEG_URL" -O "$TEMP_DIR/libffmpeg.zip"; then
            echo "Failed to download ffmpeg package"
            rm -rf "$TEMP_DIR"
            exit 1
        fi
        
        # Verify the file was actually downloaded and has content
        if [[ ! -s "$TEMP_DIR/libffmpeg.zip" ]]; then
            echo "Downloaded file is empty, download likely failed"
            rm -rf "$TEMP_DIR"
            exit 1
        fi
        
        # Change to temp directory
        pushd "$TEMP_DIR" >/dev/null || { echo "Failed to change directory"; rm -rf "$TEMP_DIR"; exit 1; }
        
        # Extract the zip file
        echo "Extracting libffmpeg.zip"
        if ! unzip -q libffmpeg.zip; then
            echo "Failed to extract libffmpeg.zip"
            popd >/dev/null
            rm -rf "$TEMP_DIR"
            exit 1
        fi
        
        # Verify extracted file exists
        if [[ ! -f "libffmpeg.so" ]]; then
            echo "Expected libffmpeg.so not found in the downloaded archive"
            popd >/dev/null
            rm -rf "$TEMP_DIR"
            exit 1
        fi
        
        # Install the file
        echo "# Installing libffmpeg.so to destination"
        
        # Update version file first (to mark even failed attempts)
        echo "$VERSION_URL" > "$OPERA_LIB_EXTRA/libffmpeg.ver"
        
        # Check if the file is different from existing file
        if ! cmp -s "libffmpeg.so" "$OPERA_LIB_EXTRA/libffmpeg.so"; then
            echo "Installing new version of libffmpeg.so"
            if ! cp -fp "libffmpeg.so" "$OPERA_LIB_EXTRA/libffmpeg.so"; then
                echo "Failed to install libffmpeg.so"
                popd >/dev/null
                rm -rf "$TEMP_DIR"
                exit 1
            fi
            echo "Successfully installed libffmpeg.so"
        else
            echo "Current libffmpeg.so is already up to date"
        fi
        
        # Return to original directory
        popd >/dev/null
        
        # Clean up temporary files
        rm -rf "$TEMP_DIR"
    fi
fi

echo "# done"

